import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Arrays;

public class ProcessImpl extends UnicastRemoteObject implements ProcessRMI {
    private int processID;
    private int[] vectorClock;
    private int totalProcesses;

    public ProcessImpl(int processID, int totalProcesses) throws RemoteException {
        this.processID = processID;
        this.totalProcesses = totalProcesses;
        this.vectorClock = new int[totalProcesses];  // Initialize the vector clock
    }

    // To receive a message and ensure causal ordering
    @Override
    public void sendMessage(int[] incomingClock, String message, int senderID) throws RemoteException {
        System.out.println("Process " + senderID + " sent: " + message);

        // Update the local vector clock
        for (int i = 0; i < totalProcesses; i++) {
            vectorClock[i] = Math.max(vectorClock[i], incomingClock[i]);
        }
        vectorClock[processID]++;

        System.out.println("Updated vector clock: " + Arrays.toString(vectorClock));
    }

    // Simulate sending a message to another process
    public void sendEvent(String message, ProcessRMI receiver) throws RemoteException {
        vectorClock[processID]++;  // Increment local clock before sending
        System.out.println("Process " + processID + " sending: " + message + " with vector clock: " + Arrays.toString(vectorClock));
        receiver.sendMessage(vectorClock, message, processID);
    }
}